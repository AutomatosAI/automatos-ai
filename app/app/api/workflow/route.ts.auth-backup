import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { PrismaClient } from '@prisma/client';
import { WorkflowFormData } from '@/lib/types';
import { authOptions } from '@/lib/auth';

const prisma = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body: WorkflowFormData = await request.json();
    
    // Validate input
      return NextResponse.json(
        { error: 'GitHub URL is required' },
        { status: 400 }
      );
    }

      return NextResponse.json(
        { error: 'Valid mode is required' },
        { status: 400 }
      );
    }

    // Create workflow in database first
    const workflow = await prisma.workflow.create({
      data: {
        githubUrl: body.githubUrl,
        prompt: body.prompt || null,
        mode: body.mode,
        userId: session.user.id,
        status: 'pending',
        progress: 0,
      },
    });

    // Call the actual orchestrator API
    try {
      const backendPayload = {
        repository_url: body.githubUrl,
        task_prompt: body.prompt || undefined,
      };

      const backendResponse = await fetch('http://enhanced_mcp_bridge:8001/workflow', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': 'xplaincrypto-api-key',
        },
        body: JSON.stringify(backendPayload),
      });

        const errorText = await backendResponse.text();
        console.error('Backend API error:', errorText);
        
        await prisma.workflow.update({
          where: { id: workflow.id },
          data: { status: 'failed' },
        });

        return NextResponse.json(
          { error: 'Backend error: ' + errorText },
          { status: 500 }
        );
      }

      const backendResult = await backendResponse.json();
      
      if (backendResult.workflow_id) {
        await prisma.workflow.update({
          where: { id: workflow.id },
          data: { 
            status: 'running',
          },
        });
      }

      return NextResponse.json({
        success: true,
        data: {
          workflowId: workflow.id,
          status: 'running',
          backendWorkflowId: backendResult.workflow_id,
        },
      });

    } catch (backendError) {
      console.error('Failed to call backend API:', backendError);
      
      await prisma.workflow.update({
        where: { id: workflow.id },
        data: { status: 'failed' },
      });

      return NextResponse.json(
        { error: 'Failed to start workflow on backend' },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error starting workflow:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const workflows = await prisma.workflow.findMany({
      where: {
        userId: session.user.id,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json({
      success: true,
      data: workflows,
    });

  } catch (error) {
    console.error('Error fetching workflows:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
